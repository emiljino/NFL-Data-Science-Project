#imports
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import math
data_plays = pd.read_csv("~/Desktop/NFL/Data/plays.csv")
data_tracking2018 = pd.read_csv("~/Desktop/NFL/Data/tracking2018.csv")
data_tracking2019 = pd.read_csv("~/Desktop/NFL/Data/tracking2019.csv")
data_tracking2020 = pd.read_csv("~/Desktop/NFL/Data/tracking2020.csv")
data = np.load("/Users/TobyCheng/Desktop/NFL/Arrays/data_running.npy", allow_pickle = True)

#%%
import matplotlib as mpl
import matplotlib.font_manager as font_manager
plt.style.use('default')
mpl.rcParams['font.family']='serif'
cmfont = font_manager.FontProperties(fname=mpl.get_data_path() + '/fonts/ttf/cmr10.ttf')
mpl.rcParams['font.serif']=cmfont.get_name()
mpl.rcParams['mathtext.fontset']='cm'
mpl.rcParams['axes.unicode_minus']=False

#%%
deleted_ym = [2,4,5,6,7,9,10,11,15,16,17,18,21,22,23,24,25,26,27,28,29]
deleted_yl = [0,1,3,5,6,7,8,9,12,13,14,15,18,19,20,25,27]
deleted_yr = [0,1,2,3,4,8,10,11,12,13,14,16,17,19,20,21,22,23,24,26,28,29]
data_middle = np.delete(data, deleted_ym, 0)
data_left = np.delete(data, deleted_yl, 0)
data_right = np.delete(data, deleted_yr, 0)
del deleted_ym, deleted_yl, deleted_yr


#%% return values based on conditions
def return_vals(data, condition_name, comparison, condition_answer, return_collumn):
    conditions = ""
    for i in range(0, len(condition_name)-1):
        cn = condition_name[i]
        c = comparison[i]
        ca = condition_answer[i]
        if type(ca) is str:
            conditions += cn+" "+c+" "+"\""+ca+"\""+" "+"&"+" "
        else:
            ca = str(ca)
            conditions += cn+" "+c+" "+ca+" "+"&"+" "
    cn = condition_name[-1]
    c = comparison[-1]
    ca = condition_answer[-1]
    if type(ca) is str:
        conditions += cn+" "+c+" "+"\""+ca+"\""
    else:
        ca = str(ca)
        conditions += cn+" "+c+" "+ca
    conditions = str(conditions)
    return data.query(conditions)[return_collumn]

#%% k = k nearest players
def field_control_average(gameId, playId, frame_start, frame_end, k, top_speed, reaction_time):
    if str(gameId)[:4] == "2018":
        data_tracking = data_tracking2018
    elif str(gameId)[:4] == "2019":
        data_tracking = data_tracking2019
    elif str(gameId)[:4] == "2020":
        data_tracking = data_tracking2020
        
    ca = ["gameId", "playId", "team"]
    c = ["==", "==", "=="]
    cn_home = [gameId, playId, "home"]
    cn_away = [gameId, playId, "away"]
    
    x_home = (np.array(return_vals(data_tracking, ca, c, cn_home, "x")))
    y_home = np.array(return_vals(data_tracking, ca, c, cn_home, "y"))
    x_away = (np.array(return_vals(data_tracking, ca, c, cn_away, "x")))
    y_away = np.array(return_vals(data_tracking, ca, c, cn_away, "y"))
    s_home = (np.array(return_vals(data_tracking, ca, c, cn_home, "s")))
    s_away = np.array(return_vals(data_tracking, ca, c, cn_away, "s"))    
    d_home = (np.array(return_vals(data_tracking, ca, c, cn_home, "dir")))
    d_away = np.array(return_vals(data_tracking, ca, c, cn_away, "dir"))
    
    x_home = x_home.reshape(11, int(len(x_home)/11))
    y_home = y_home.reshape(11, int(len(y_home)/11))
    x_away = x_away.reshape(11, int(len(x_away)/11))
    y_away = y_away.reshape(11, int(len(y_away)/11))
    s_home = s_home.reshape(11, int(len(s_home)/11))
    s_away = s_away.reshape(11, int(len(s_away)/11))
    d_home = d_home.reshape(11, int(len(d_home)/11))
    d_away = d_away.reshape(11, int(len(d_away)/11))
    
    field_control_all = []
    for n in range(frame_start, frame_end+1):
        x_h = []
        y_h = []
        d_h = []
        s_h = []
        for i in range(0, 11):
            x_val_h = (x_home[i])[n]
            x_h.append(x_val_h)
            y_val_h = (y_home[i])[n]
            y_h.append(y_val_h)
            d_val_h = (d_home[i])[n]
            d_h.append(d_val_h)
            s_val_h = (s_home[i])[n]
            s_h.append(s_val_h)
            
        x_a = []
        y_a = []
        d_a = []
        s_a = []
        for i in range(0, 11):
            x_val_a = (x_away[i])[n]
            x_a.append(x_val_a)
            y_val_a = (y_away[i])[n]
            y_a.append(y_val_a)
            d_val_a = (d_away[i])[n]
            d_a.append(d_val_a)
            s_val_a = (s_away[i])[n]
            s_a.append(s_val_a)

     
        field_control_frame = np.zeros([53, 120])
        for x in range(0, 120):
            for y in range(0, 53):
                t_h = []
                t_a = []
                for i in range(0, 11):
                    is_h = s_h[i]
                    id_h = d_h[i]
                    ix_h = x_h[i]
                    iy_h = y_h[i] 
                    
                    ivx_h = is_h * math.cos(math.pi/2)-math.radians(id_h)
                    ivy_h = is_h * math.sin(math.pi/2)-math.radians(id_h)
                    after_reaction_x_h = reaction_time * ivx_h
                    after_reaction_y_h = reaction_time * ivy_h
                    
                    distance_x_h = abs((ix_h + after_reaction_x_h) - x)
                    distance_y_h = abs((iy_h + after_reaction_y_h) - y)
                    distance_h = math.sqrt((distance_x_h ** 2)+(distance_y_h ** 2))
                    
                    t_h.append(distance_h/top_speed)

                    
                    is_a = s_a[i]
                    id_a = d_a[i]
                    ix_a = x_a[i]
                    iy_a = y_a[i] 
                    
                    ivx_a = is_a * math.cos(math.pi/2)-math.radians(id_a)
                    ivy_a = is_a * math.sin(math.pi/2)-math.radians(id_a)
                    
                    after_reaction_x_a = reaction_time * ivx_a
                    after_reaction_y_a = reaction_time * ivy_a
                    
                    distance_x_a = abs((ix_a + after_reaction_x_a) - x)
                    distance_y_a = abs((iy_a + after_reaction_y_a) - y)
                    distance_a = math.sqrt((distance_x_a ** 2)+(distance_y_a ** 2))
                    
                    t_a.append(distance_a/top_speed) 

                    
                t_h = sorted(set(t_h))[:k]
                t_a = sorted(set(t_a))[:k]
                th = sum(t_h)
                ta = sum(t_a)


                field_control_frame[y,x] = 1/(1+math.e ** (th-ta))
        field_control_all.append(field_control_frame)
    
    values = np.zeros([53,120])
    for x in range(0, 120):
        for y in range(0, 53):
            fc_vals = []
            for i in range(0, len(field_control_all)):
                fc_vals.append(((field_control_all[i])[y])[x])
            values[y,x] = (sum(fc_vals)/len(fc_vals))
    return values


#%% dt = frame differences for avg, lx, ... uy, .. = cropping around normalization
def fc_differences(dt1, dt2, lx, ux, ly, uy, k, top_speed, reaction_time, data):
    data_good = np.zeros([1, 10])
    data_nogood = np.zeros([1, 10])
    for n in range(0, np.shape(data)[0]):
        yardsGained = int(data[n, 3])
        if yardsGained > 3:
            data_good = np.vstack([data_good, data[n, :]])
        else:
            data_nogood = np.vstack([data_nogood, data[n, :]])
    data_good = np.delete(data_good, 0, 0)
    data_nogood = np.delete(data_nogood, 0, 0)

    def return_normalized_values(data_group, dt1, dt2, lx, ux, ly, uy):
        values = []
        for n in range(0, np.shape(data_group)[0]):
            print(n)
            gid = int(data_group[n, 0])
            pid = int(data_group[n, 1])
            frame_start = int(data_group[n, 8])
            play_direction = data_group[n, 7]
            possession_team = data_group[n, 9]
            y_pos = int(data_group[n, 6])
            value = field_control_average(gid, pid, frame_start+dt1, frame_start+dt2, k, top_speed, reaction_time)
            if play_direction == "left":
                if possession_team == "home":
                    values.append(np.rot90(value, 2))
                elif possession_team == "away":
                    value_flipped = np.zeros([53, 120])
                    for x in range(0, 120):
                        for y in range(0, 53):
                            val = value[y,x]
                            value_flipped[y,x] = 1-val
                    values.append(np.rot90(value_flipped, 2))
            elif play_direction == "right":
                if possession_team == "home":
                    values.append(value)
                elif possession_team == "away":
                    value_flipped = np.zeros([53, 120])
                    for x in range(0, 120):
                        for y in range(0, 53):
                            val = value[y,x]
                            value_flipped[y,x] = 1-val
                    values.append(value_flipped)
        norm_values = []
        for n in range(0, np.shape(data_group)[0]):
            vals = values[n]
            play_direction = data_group[n, 7]
            if play_direction == "left":
                yl = 120 - (int(data_group[n, 2]))
                norm_values.append(vals[:,yl - lx:yl + ux])
            elif play_direction == "right":
                yl = (int(data_group[n, 2]))
                norm_values.append(vals[:,yl - lx:yl + ux])
        return norm_values      
        

        norm_values_final = []
        for n in range(0, np.shape(data_group)[0]):
            vals = norm_values[n]
            norm_values_final.append(vals[y_pos - ly:y_pos + uy,:])
        return norm_values_final
 

    norm_values_good = return_normalized_values(data_good, dt1, dt2, lx, ux, ly, uy)
    norm_values_nogood = return_normalized_values(data_nogood, dt1, dt2, lx, ux, ly, uy)

    def differences(values_good, values_nogood):
        [dy, dx] = np.shape(values_good[0])
        fc_average_good = np.zeros([dy, dx])
        fc_average_nogood = np.zeros([dy, dx])
        for x in range(0, dx):
            for y in range(0, dy):
                fc_vals_good = []
                for fc in values_good:
                    fc_vals_good.append(fc[y,x])
                fc_average_good[y,x] = (sum(fc_vals_good)/len(fc_vals_good))
                fc_vals_nogood = []
                for fc in values_nogood:
                    fc_vals_nogood.append(fc[y,x])
                fc_average_nogood[y,x] = (sum(fc_vals_nogood)/len(fc_vals_nogood))            
        differences = np.zeros([dy, dx])
        for x in range(0, dx):
            for y in range(0, dy):
                differences[y,x] = (fc_average_good[y,x]) - (fc_average_nogood[y,x])
        return differences
    
    difference_values = differences(norm_values_good, norm_values_nogood)
    return difference_values

#%%
dif_l = fc_differences(13, 13, 11, 13, 15, 15, 1, 8, 1, data_left)
dif_m = fc_differences(3, 3, 11, 13, 15, 15, 1, 8, 1, data_middle)
dif_r = fc_differences(13, 13, 11, 13, 15, 15, 1, 8, 1, data_right)

#%%
import matplotlib.colors as colors
from mpl_toolkits.axes_grid1 import make_axes_locatable

fig, axs = plt.subplots(1, 3,figsize=(15, 15), layout = "compressed")


def truncate_colormap(cmap, minval=0.0, maxval=1.0, n=100):
    new_cmap = colors.LinearSegmentedColormap.from_list(
        'trunc({n},{a:.2f},{b:.2f})'.format(n=cmap.name, a=minval, b=maxval),
        cmap(np.linspace(minval, maxval, n)))
    return new_cmap


cmap1 = plt.get_cmap('hot')
cmap = truncate_colormap(cmap1, 0, 0.9)


im = axs[0].imshow(dif_l, cmap = cmap)
im = axs[1].imshow(dif_m, cmap = cmap)
im = axs[2].imshow(dif_r, cmap = cmap)
cb = fig.colorbar(im)
cb.set_label(r"$\Delta$"+" Field Control", fontsize = 20)


title_size = 25
tick_size = 15
axs[0].set_xticks([2,12,22])
axs[0].set_xticklabels([-10, 0, 10])
axs[0].set_yticks([46, 36, 26, 16, 6])
axs[0].set_yticklabels([-20, -10, 0, 10, 20], fontsize = 17)
axs[0].axvline(12, ymin = -1, ymax = 54, color = "black", ls = "--", lw = 2)
axs[0].set_title("Left Edge Run", fontsize = title_size)
axs[0].tick_params(axis='both', which='major', labelsize=tick_size)
axs[0].set_ylabel("Distance from Runner Y Position (Yards)", fontsize = 20)
axs[0].set_ylim([0, 52])
axs[1].set_xticks([2,12,22])
axs[1].set_xticklabels([-10, 0, 10], fontsize = 17)
axs[1].set_yticks([])
axs[1].set_yticklabels([])
axs[1].axvline(12, ymin = -1, ymax = 54, color = "black", ls = "--", lw = 2)
axs[1].set_title("Middle Run", fontsize = title_size)
axs[1].set_xticks([2,12,22])
axs[1].set_xticklabels([-10, 0, 10], fontsize = 17)
axs[1].tick_params(axis='both', which='major', labelsize=tick_size)
axs[1].set_xlabel("Distance from LOS (Yards)", fontsize = 20)
axs[2].set_xticks([2,12,22])
axs[2].set_xticklabels([-10, 0, 10], fontsize = 17)
axs[2].set_yticks([])
axs[2].set_yticklabels([])
axs[2].axvline(12, ymin = -1, ymax = 54, color = "black", ls = "--", lw = 2)
axs[2].set_title("Right Edge Run", fontsize = title_size)
axs[2].tick_params(axis='both', which='major', labelsize=tick_size)
axs[2].set_ylim([0, 52])
